<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2017/10/15/Math%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>这就是π：<br>        const PI = Math.PI;    </p>
<p>构造器：<br>        var num = Number(4)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript （ES6）数据类型详解]]></title>
      <url>/2017/09/14/JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>最新的ES6一共是7中数据类型（包括一种复杂数据类型和6种原始数据类型）<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="数据类型种类"><a href="#数据类型种类" class="headerlink" title="数据类型种类"></a>数据类型种类</h2><p>EC5共有5种简单数据类型（也称为<code>基本数据类型/原始数据类型</code>）：</p>
<blockquote>
<p>Undefined,Null,Boolean,Number,String</p>
</blockquote>
<p>1种<code>复杂数据类型</code></p>
<blockquote>
<p>Object</p>
</blockquote>
<p>和ES6新加的（也是原始数据类型）</p>
<blockquote>
<p>Symbol </p>
</blockquote>
<p>所以现在最新的ES6一共是7种数据类型（包括一种复杂数据类型和6种原始数据类型）</p>
<h2 id="引用类型和值类型"><a href="#引用类型和值类型" class="headerlink" title="引用类型和值类型"></a>引用类型和值类型</h2><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><blockquote>
<p>数值、布尔值、null、undefined</p>
</blockquote>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><blockquote>
<p>对象、数组、函数</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[typeof和instantof的用法]]></title>
      <url>/2017/09/14/typeof-constructor%E5%92%8Cinstantof%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>typeof <strong>操作符</strong>返回一个字符串，指示未经计算的操作数的类型；<br>使用instanceof可以用来弥补不足<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<blockquote>
<p>typeof <strong>操作符</strong>返回一个字符串，指示未经计算的操作数的类型；</p>
</blockquote>
<h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p><code>typeof operand</code><br>    operand代表一个表达式、表达对象或是原始值，其类型将被返回；<br>可能的返回结果如下：<br>Undefined —————–”undefined”<br>Null—————–”object” (见下方)<br>Boolean—————– “boolean”<br>Number—————–”number”<br>String—————–”string”<br>Symbol (ES6 新增)———–”symbol”<br>宿主对象(由JS环境提供)—————–    Implementation-dependent<br>函数对象 —————–”function”<br>任何其他对象—————–”object”</p>
<p>一些用法：<br>判断一个变量typeof返回结果、<br>判断一个变量是否存在</p>
<blockquote>
<p>instanceof 可以检测一个引用类型是Array还是娶她的什么。</p>
</blockquote>
<p>因为typeof判断<strong>引用类型</strong>时候</p>
<blockquote>
<p>typeof 函数   都是function<br>typeof 实例   都是object<br>无法判断</p>
</blockquote>
<p>使用instanceof</p>
<blockquote>
<p>[] instanceof Array    true<br>true instanceof Boolean  true</p>
</blockquote>
<p>注意：如果以上数据是判断  x instanceof object 的话全是true   （引用类型）<br>因为一切皆对象  所以毫无意义<br>一般只用来判断引用类型</p>
<hr>
<h2 id="typeof的返回规则："><a href="#typeof的返回规则：" class="headerlink" title="typeof的返回规则："></a>typeof的返回规则：</h2><p>一、对于数字类型的操作数而言， typeof 返回的值是 number。<br>二、对于字符串类型， typeof 返回的值是 string。比如typeof(“123”)返回的值是string。<br>三、对于布尔类型， typeof 返回的值是 boolean 。比如typeof(true)返回的值是boolean。<br>四、对于对象、数组、null 返回的值是 object 。比如typeof(window)，typeof(document)，typeof(null)返回的值都是object。<br>五、对于函数类型，返回的值是 function。比如：typeof(eval)，typeof(Date)返回的值都是function。<br>六、如果运算数是没有定义的（比如说不存在的变量、函数或者undefined），将返回undefined。比如：typeof(sss)、typeof(undefined)都返回undefined。</p>
<p><strong><em>typeof一些例子：</em></strong><br>    typeof NaN === ‘number’;<br>       typeof “” === ‘string’;<br>       typeof “   “ === ‘string’;<br>       typeof Boolean(true) === true;<br>       typeof {} === ‘object’;<br>       typeof window === ‘object’;<br>       typeof []===’object’;<br>       typeof null===’object’;<br>       typeof new Date() === ‘object’;<br>        typeof new Boolean(true) === ‘object’;<br>        typeof new Number(1) ==== ‘object’;<br>        typeof new String(“abc”) === ‘object’;<br>        typeof function(){} === ‘function’;<br>        typeof Math.sin === ‘function’;</p>
</the>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript Api </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angular四种安装环境的方式、失败解决方案]]></title>
      <url>/2017/09/10/angular%E5%9B%9B%E7%A7%8D%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%81%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br> &emsp;&emsp;通往angular的路由千万条，不同的选择也将决定你的项目的架构、可维护性、灵活度等<br> &emsp;&emsp;本文列举项目构建的4中方式，至于后续实践还需一个个踩坑<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="环境搭建——angular2"><a href="#环境搭建——angular2" class="headerlink" title="环境搭建——angular2"></a>环境搭建——angular2</h2><p> &emsp;&emsp;以下介绍angular环境构建的方法,包括<code>官方指定的angular/cli</code>、<code>基于angular-seed</code>、<code>基于webpack</code>和<code>手动创建</code><br><strong> 注：本文所指的angular版本为angular2-angular4，由于能力有限，如您发现错误还请不吝赐教</strong><br><br></p>
<h3 id="angular-cli的安装"><a href="#angular-cli的安装" class="headerlink" title="angular/cli的安装"></a>angular/cli的安装</h3><p>请参考: <a href="https://www.angular.cn/guide/quickstart" target="_blank" rel="external">官方指导文档</a><br>    官方默认是<code>npm</code>安装，文档简洁明了，但是由于每个人的环境不一，在安装过程中可能会发生以下错误：</p>
<ol>
<li>可能提示缺少<code>Python</code>环境；</li>
<li>可能会依赖某些framework导致会要求安装<code>Visual Studio</code>；</li>
<li><code>node-sass</code>报错（因为国内被墙掉了，你懂的！）</li>
<li><code>node-gyp</code>模块可能会编译错误；</li>
</ol>
<p><strong>如果发生以上错误，你可以：</strong></p>
<blockquote>
<p>1、根据提示安装缺少的环境或配置<br> 2、使用<strong>cnpm</strong>代替npm安装 </p>
</blockquote>
<p><br></p>
<h3 id="angular-seed"><a href="#angular-seed" class="headerlink" title="angular-seed"></a>angular-seed</h3><pre><code>是一个Angular的种子文件，本文特指angular2-seed，去除掉了angular/cli里面许多我们不需要的东西，
</code></pre><p>参考地址：<a href="https://github.com/angular/angular2-seed/" target="_blank" rel="external">官方github地址</a></p>
<p>使用：</p>
<ol>
<li>前置需要的安装包：<br><code>$ npm install -g webpack webpack-dev-server typescript</code></li>
<li>使用git克隆下来：<br><code>$ git clone https://github.com/angular/angular2-seed.git</code></li>
<li>找到克隆的文件：<br><code>$ npm install</code></li>
<li>cd到你的文件根目录：<br><code>$ npm start</code><br>完成以上步骤你就成功运行了你的初始环境了</li>
</ol>
<p><br></p>
<h3 id="基于webpack安装"><a href="#基于webpack安装" class="headerlink" title="基于webpack安装"></a>基于webpack安装</h3><pre><code>github地址：https://github.com/kunl/Angular-webpack-AOT 
</code></pre><p><br></p>
<h3 id="手动创建项目"><a href="#手动创建项目" class="headerlink" title="手动创建项目"></a>手动创建项目</h3><pre><code>真的勇士敢于直面惨淡的人生，敢于正视淋漓的鲜血；
</code></pre><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><pre><code>在开始搭建Angular环境前，还需要做一些准备工作，包括安装Angular所依赖的基础环境Node.js，需要确认Node.js版本为v4.x.x以上，npm版本为v3.x.x以上。
</code></pre><h4 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h4><ol>
<li><p>创建package.json，配置依赖包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">  &quot;name&quot;: &quot;HelloByHand&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;npm run server&quot;,</div><div class="line">    &quot;server&quot;: &quot;webpack-dev-server –inline –colors –progress –port 3000&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;@angular/common&quot;: &quot;2.0.0&quot;,</div><div class="line">    &quot;@angular/compiler&quot;: &quot;2.0.0&quot;,</div><div class="line">    &quot;@angular/core&quot;: &quot;2.0.0&quot;,</div><div class="line">    &quot;@angular/platform-browser&quot;: &quot;2.0.0&quot;,</div><div class="line">    &quot;@angular/platform-browser-dynamic&quot;: &quot;2.0.0&quot;,</div><div class="line">    &quot;reflect-metadata&quot;: &quot;~0.1.8&quot;,</div><div class="line">    &quot;core-js&quot;: &quot;~2.4.1&quot;,</div><div class="line">    &quot;rxjs&quot;: &quot;5.0.0-beta.12&quot;,</div><div class="line">    &quot;zone.js&quot;: &quot;~0.6.26&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;@types/core-js&quot;: &quot;~0.9.34&quot;,</div><div class="line">    &quot;ts-loader&quot;: &quot;~1.2.0&quot;,</div><div class="line">    &quot;webpack&quot;: &quot;~1.12.9&quot;,</div><div class="line">    &quot;webpack-dev-server&quot;: &quot;~1.14.0&quot;,</div><div class="line">    &quot;typescript&quot;: &quot;~2.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建tsconfig.json,配置Typescript编译器的编译参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  &quot;compileOnSave&quot;: true,</div><div class="line">  &quot;compilerOptions&quot;: &#123;</div><div class="line">   &quot;module&quot;: &quot;commonjs&quot;,</div><div class="line">   &quot;target&quot;: &quot;es5&quot;,</div><div class="line">    &quot;sourceMap&quot;: true,</div><div class="line">    &quot;declaration&quot;: false,</div><div class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,</div><div class="line">    &quot;emitDecoratorMetadata&quot;: true,</div><div class="line">    &quot;experimentalDecorators&quot;: true,</div><div class="line">    &quot;removeComments&quot;:false,</div><div class="line">    &quot;noImplicitAny&quot;: true,</div><div class="line">    &quot;suppressExcessPropertyErrors&quot;: true,</div><div class="line">    &quot;typeRoots&quot;: [</div><div class="line">      &quot;node_modules/@types&quot;</div><div class="line">    ],</div><div class="line">    &quot;exclude&quot;: [</div><div class="line">      &quot;node_modules&quot;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建资源文件夹<br><code>在项目根目录下穿件一个src文件夹</code></p>
</li>
<li><p>创建组件相关文件<br>在src目录下创建<code>app.component.ts</code> 文件以及模板文件<code>app.component.html</code>，示例代码如下：</p>
<figure class="highlight plain"><figcaption><span>app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  selector: &apos;hello-world&apos;,</div><div class="line">  templateUrl: &apos;src/app.component.html&apos;</div><div class="line">&#125;)</div><div class="line">export class AppComponent &#123; &#125;</div><div class="line"></div><div class="line">// app.component.html</div><div class="line">&lt;h3&gt;Hello World！&lt;/h3&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>创建app.module.ts文件<br>在Angular应用中需要用模块来组织一些功能紧密相关的代码块，每个应用至少有一个模块，习惯上把它叫作<code>AppModule</code>。在src目录下创建一个<code>app.module.ts</code>文件来定义<code>AppModule</code>，代码如下：</p>
<figure class="highlight plain"><figcaption><span>&#123; BrowserModule &#125; from '@angular/platform-browser';</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</div><div class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">  declarations: [</div><div class="line">    AppComponent</div><div class="line">  ],</div><div class="line">  imports: [</div><div class="line">    BrowserModule</div><div class="line">  ],</div><div class="line">  providers: [],</div><div class="line">  bootstrap: [AppComponent]</div><div class="line">&#125;)</div><div class="line">export class AppModule &#123; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加main.ts<br>Angular项目一般有一个入口文件，通过这个文件来串联起整个项目。示例代码如下：</p>
<figure class="highlight plain"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import &apos;reflect-metadata&apos;;</div><div class="line">import &apos;zone.js&apos;;</div><div class="line">import &#123; platformBrowserDynamic &#125; from &apos;@angular/platform-browser-dynamic&apos;;</div><div class="line"></div><div class="line">import &#123; AppModule &#125; from &apos;./app.module&apos;;</div><div class="line"></div><div class="line">platformBrowserDynamic().bootstrapModule(AppModule)</div><div class="line">  .catch(err =&gt; console.log(err));</div></pre></td></tr></table></figure>
</li>
<li><p>创建index.heml宿主页面</p>
<figure class="highlight plain"><figcaption><span>html></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">  &lt;title&gt;Hello World&lt;/title&gt;</div><div class="line">  &lt;base href=&quot;/&quot;&gt;</div><div class="line"></div><div class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;hello-world &gt;加载中…&lt;/hello-world&gt;</div><div class="line">&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>创建webpack.config.js</p>
<figure class="highlight plain"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">   entry: &apos;./src/main.js&apos;,</div><div class="line">   output: &#123;</div><div class="line">      filename: &apos;./bundle.js&apos;</div><div class="line">   &#125;,</div><div class="line">   resolve: &#123;</div><div class="line">      root: [path.join(__dirname,&apos;src&apos;)],</div><div class="line">      extensions: [&apos;&apos;,&apos;.ts&apos;,&apos;.js&apos;]</div><div class="line">   &#125;,</div><div class="line"></div><div class="line">   module: &#123;</div><div class="line">      loaders: [</div><div class="line">       &#123; test: /\.ts$/, loader: &apos;ts-loader&apos;&#125;</div><div class="line">      ]</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><br><br><br></p>
<h2 id="几种安装方式的区别简单介绍"><a href="#几种安装方式的区别简单介绍" class="headerlink" title="几种安装方式的区别简单介绍"></a>几种安装方式的区别简单介绍</h2><p>angular/cli：<br>    官方推荐</p>
<p>angular-seed：<br>    自带了简单的<code>路由</code>、自带了<code>form</code>、还带有<code>http</code>请求模块、体现出了Angular的简单功能、使得项目的体积量更小了</p>
<p>基于webpack安装<br>    可以自由配置webpack.config.js<br>    从node转到前端的项目或公司推荐使用</p>
<p>手动创建<br>    推荐级别的使用<br>    自由配置，想要什么是什么。方便快捷</p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Basics]]></title>
      <url>/2017/09/08/Basics/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Basics相关导航<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
      
        <categories>
            
            <category> Basics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs]]></title>
      <url>/2017/09/08/Nodejs/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>nodejs相关导航<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Css]]></title>
      <url>/2017/09/08/Css/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Css相关导航<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">
</the>]]></content>
      
        <categories>
            
            <category> Css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Html]]></title>
      <url>/2017/09/08/Html/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>HTml相关导航<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
      
        <categories>
            
            <category> Html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo 发表文章]]></title>
      <url>/2017/09/06/%E6%88%91%E7%9A%84%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p>文章发表：<br><code>hexo new &quot;这是一篇文章的题目&quot;</code><br>使用md编辑文件 <a id="more"></a></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="hexo-1"><a href="#hexo-1" class="headerlink" title="hexo"></a>hexo</h3><p>文章发表：<br><code>hexo new &quot;这是一篇文章的题目&quot;</code><br>使用md编辑文件 </p>
]]></content>
      
        <categories>
            
            <category> Likes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[测试：markdown的基本用法]]></title>
      <url>/2017/09/06/Markdowm%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>MaHua是什么?<br>一个在线编辑markdown文档的编辑器<br>向Mac下优秀的markdown编辑器mou致敬<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><img src="mahua-logo.jpg" alt="mahua"></p>
<p>##MaHua是什么?<br>一个在线编辑markdown文档的编辑器</p>
<p>向Mac下优秀的markdown编辑器mou致敬</p>
<p>##MaHua有哪些功能？</p>
<ul>
<li>方便的<code>导入导出</code>功能<ul>
<li>直接把一个markdown的文本文件拖放到当前这个页面就可以了</li>
<li>导出为一个html格式的文件，样式一点也不会丢失</li>
</ul>
</li>
<li>编辑和预览<code>同步滚动</code>，所见即所得（右上角设置）</li>
<li><code>VIM快捷键</code>支持，方便vim党们快速的操作 （右上角设置）</li>
<li>强大的<code>自定义CSS</code>功能，方便定制自己的展示</li>
<li>有数量也有质量的<code>主题</code>,编辑器和预览区域</li>
<li>完美兼容<code>Github</code>的markdown语法</li>
<li>预览区域<code>代码高亮</code></li>
<li>所有选项自动记忆</li>
</ul>
<p>##有问题反馈<br>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>
<ul>
<li>邮件(dev.hubo#gmail.com, 把#换成@)</li>
<li>QQ: 287759234</li>
<li>weibo: <a href="http://weibo.com/ihubo" target="_blank" rel="external">@草依山</a></li>
<li>twitter: <a href="http://twitter.com/ihubo" target="_blank" rel="external">@ihubo</a></li>
</ul>
<p>##捐助开发者<br>在兴趣的驱动下,写一个<code>免费</code>的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。<br>当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。</p>
<p>##感激<br>感谢以下的项目,排名不分先后</p>
<ul>
<li><a href="http://mouapp.com/" target="_blank" rel="external">mou</a> </li>
<li><a href="http://ace.ajax.org/" target="_blank" rel="external">ace</a></li>
<li><a href="http://jquery.com" target="_blank" rel="external">jquery</a></li>
</ul>
<p>##关于作者</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ihubo = &#123;</div><div class="line">  nickName  : <span class="string">"草依山"</span>,</div><div class="line">  site : <span class="string">"http://jser.me"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></the>]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
            <tag> hello world </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[json中对象操作的一点小知识]]></title>
      <url>/2017/09/06/json%20%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>对json对象进行处理！<br>对对象进行操作<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<p>创建/接收一个json数组：<br>myobject=[<br>            {<br>                “name”: “zyc”,<br>                “age”: “25”<br>            },<br>            {<br>                “name”: “zyn”,<br>                “age”: “26”<br>            },<br>            {<br>                “name”: “zx”,<br>                “age”: “27”<br>            }<br>        ]</p>
<p>业务需要给每一项加一个check：”true”</p>
<p>for(let i=0; i&lt;myobject.length; i++){<br>    myobject[i].check=”true”;<br>}</p>
<p>so easy！<br>结果如下：<br>(3) [{…}, {…}, {…}]<br>    [<br>    {name: “zyc”, age: “25”, check: “true”}</p>
<pre><code>{name: &quot;zyn&quot;, age: &quot;26&quot;, check: &quot;true&quot;}

{name: &quot;zx&quot;, age: &quot;27&quot;, check: &quot;true&quot;}
]
</code></pre><p>那如果要删除一项呢？<br>老套聚  继续  如删除age<br>for(let i=0; i&lt;myobject.length; i++){<br>    delete myobject[i].age;<br>}</p>
<p>结果如下：<br>    (3) [{…}, {…}, {…}]<br>    0: {name: “zyc”, check: “true”}<br>    1: {name: “zyn”, check: “true”}<br>    2: {name: “zx”, check: “true”}<br>    length: 3<strong>proto</strong>: Array(0)</p>
<p>其实就是简单的遍历+对象操作：<br>var obj={};<br>obj.name=”zyc”;</p>
<p>结果：<br>obj={name: “zyc”};</p>
<p>对象的遍历<br>现有一个对象<br>    friends={<br>        name：”zyn”,<br>        age: “26”,<br>        sex: “男”<br>        }<br>    for(i in friends){<br>        console.log(i)<br>    }<br>遍历结果是属性名：<br>    name<br>    age<br>    sex</p>
<p>然后我要的是属性值呢<br>    for(i in friends){<br>        console.log(friends[i])<br>    }<br>输出结果：<br>        zyn<br>        26<br>        男</p>
<p>坑点： 我都知道friends.i==friends[i]<br>      但是这个地方friends.i会被默认为访问的是friends的i属性   此处没有所以是undefined了;  此处要访问只能用后者；</p>
<p>遍历方法还有很多，直接看这:;</p>
</the>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hello world </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/06/%E5%90%84%E7%A7%8D%E6%A8%A1%E6%9D%BF-hello-world/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>个人用模板<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
</the>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hello world </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
